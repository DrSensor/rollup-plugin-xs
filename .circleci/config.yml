version: 2.1

restore_cache: &restore_cache
  restore_cache:
    key: dependency-cache-{{ checksum "package-lock.json" }}

manage_dependencies: &manage_dependencies
  run:
    name: Install/Manage dependencies
    command: npm ci

build: &build
  run:
    name: Build/Compile project
    command: npm run build

unit_tests: &unit_tests
  run:
    name: Run unit tests.
    command: npm run test:prod -- --runInBand --silent --ci

tests: &tests
  steps:
    - checkout
    - <<: *restore_cache
    - <<: *manage_dependencies
    - <<: *build
    - <<: *unit_tests

jobs:
  #region PREPARATION
  dependency_cache:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
            - /root/.npm
  analysis:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - run:
          name: Run linting.
          command: npm run lint
      - run:
          name: Run Security Check.
          command: npm audit --quiet
      - run:
          name: Validate commit messages
          command: npx commitlint --from=${CIRCLE_BRANCH} --to=${CIRCLE_SHA1}
  #endregion

  #region CROSS-BUILD
  node-latest:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - <<: *build
      - <<: *unit_tests
      - run:
          name: Submit coverage data to codecov.
          command: |
            if [[ -z $CIRCLE_PULL_REQUEST ]]; then
              bash <(curl -s https://codecov.io/bash)
            fi
          when: on_success
  node10-latest:
    docker:
      - image: circleci/node:10
    <<: *tests
  node8-latest:
    docker:
      - image: circleci/node:8
    <<: *tests
  #endregion

  #region RELEASE VERSION
  deploy-docs:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - run:
          name: Generate documentations
          command: npm run predocs
      - run:
          name: Push the documentations to Github pages
          command: npx gh-pages --dist docs --tag $CIRCLE_TAG
  draft:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - run: npx semantic-release
  publish:
    docker:
      - image: circleci/node:latest
    environment:
      PUBLISH: true
    steps:
      - checkout
      - <<: *restore_cache
      - <<: *manage_dependencies
      - run: npx semantic-release
  #endregion

workflows:
  version: 2
  build and publish on tagging:
    jobs:
      #region PREPARATION
      - dependency_cache:
          filters:
            tags:
              only: /.*/
      - analysis:
          requires:
            - dependency_cache
          filters:
            tags:
              only: /.*/
      #endregion

      #region CROSS-BUILD
      - node-latest:
          requires:
            - dependency_cache
          filters:
            tags:
              only: /.*/
      - node8-latest:
          requires:
            - analysis
          filters:
            tags:
              only: /.*/
      - node10-latest:
          requires:
            - analysis
          filters:
            tags:
              only: /.*/
      #endregion


      #region RELEASE VERSION
      - draft:
          requires:
            - node-latest
            - analysis
          filters:
            tags:
              only: /^v\d+[.]\d+[.]\d+$/
            branches:
              ignore: /.*/
      - deploy-docs:
          requires:
            - draft
          filters:
            tags:
              only: /^v\d+[.]\d+[.]\d+$/
            branches:
              ignore: /.*/
      - publish package?:
          type: approval
          requires:
            - draft
          filters:
            tags:
              only: /^v\d+[.]\d+[.]\d+$/
      - publish:
          requires:
            - publish package?
          filters:
            tags:
              only: /^v\d+[.]\d+[.]\d+$/
      #endregion
